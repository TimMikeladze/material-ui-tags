{"version":3,"file":"static/preview.2342a4e4aa50e0574a9d.bundle.js","sources":["webpack:///./src/index.tsx"],"sourcesContent":["import Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\n// import TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { StyleRulesCallback, withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Add from '@material-ui/icons/Add';\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\nimport Search from '@material-ui/icons/Search';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { compose, withStateHandlers } from 'recompose';\nimport score from 'string-score';\n\nconst styles: StyleRulesCallback = (theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    paddingLeft: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  rootChip: {\n\n  },\n  blurb: {\n    marginBottom: theme.spacing.unit,\n  },\n  chip: {\n    marginRight: theme.spacing.unit,\n    marginBottom: theme.spacing.unit,\n  },\n  menu: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  list: {\n\n  },\n  menuItem: {\n\n  },\n  formControl: {\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    marginBottom: theme.spacing.unit,\n  },\n  create: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  createValue: {\n    fontWeight: 600,\n  },\n});\n\nexport const ChipTags: React.SFC<any> = compose(\n  withStyles(styles),\n  withStateHandlers((props) => ({\n    menuAnchorElement: null,\n    menuOpen: false,\n    tags: props.tags,\n    searchValue: '',\n  }), {\n      handleRootChipClicked: (state, props) => (e) => {\n        return {\n          menuOpen: true,\n          menuAnchorElement: e.target,\n        };\n      },\n      handleMenuClosed: (state) => () => {\n        return {\n          menuOpen: false,\n          menuAnchorElement: null,\n        };\n      },\n      // TODO different ways of sorting tags instead of using the ordering of the provided tags array\n      handleTagClicked: (state, props) => (tag, checked) => {\n        const modifiedTagIndex = state.tags.findIndex((t) => t.id === tag.id);\n\n        state.tags.splice(modifiedTagIndex, 1, {\n          ...tag,\n          checked: checked === undefined ? !tag.checked : !!checked,\n        });\n\n        return {\n          tags: [...state.tags],\n        };\n      },\n      handleSearchValueChanged: (state, props) => (e) => {\n        return {\n          searchValue: e.target.value,\n        };\n      },\n      handleCreate: (state, props) => () => {\n        const tag = {\n          id: 'foo',\n          title: state.searchValue,\n          checked: true,\n        };\n\n        return {\n          searchValue: '',\n          tags: [tag, ...state.tags],\n        };\n      },\n    }),\n)(\n  ({\n    classes,\n    handleRootChipClicked,\n    tags,\n    blurb,\n    blurbPosition,\n    menuOpen,\n    handleMenuClosed,\n    handleTagClicked,\n    handleSearchValueChanged,\n    searchValue,\n    minStringScore,\n    handleCreate,\n    disableCreate,\n  }) => (\n      <div className={classes.root}>\n        <div className={classes.blurb}>\n          {blurb && <Typography className={classes.blurb} variant='caption'>{blurb}</Typography>}\n        </div>\n        <div className={classes.chips}>\n          <Chip\n            className={classNames(classes.chip, classes.rootChip)}\n            onClick={handleRootChipClicked}\n            label={'Add tag'}\n            deleteIcon={<AddCircleOutline />}\n            onDelete={handleRootChipClicked}\n            clickable\n          />\n\n          {tags && tags\n            .filter((tag) => tag.checked)\n            .map(\n              (tag: any) =>\n                (<Chip\n                  key={tag.id}\n                  className={classes.chip}\n                  label={tag.title}\n                  onDelete={() => handleTagClicked(tag, false)}\n                  clickable\n                />),\n          )\n          }\n        </div>\n        {menuOpen &&\n          <Menu open={menuOpen} onClose={handleMenuClosed} disableAutoFocusItem>\n            <div className={classes.menu}>\n              <FormControl className={classes.formControl}>\n                <InputLabel className={classes.inputLabel} htmlFor='search'>Enter a tag</InputLabel>\n                <Input\n                  className={classes.input}\n                  id='search'\n                  value={searchValue}\n                  onChange={handleSearchValueChanged}\n                  endAdornment={\n                    <InputAdornment position='end'>\n                      <IconButton>\n                        <Search />\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              {!disableCreate && !isEmpty(searchValue) &&\n                <MenuItem\n                  className={classes.menuItem}\n                  onClick={handleCreate}\n                >\n                  <IconButton>\n                    <Add />\n                  </IconButton>\n                  <ListItemText\n                    primary={\n                      <div className={classes.create}>\n                        Create \"<div className={classes.createValue}>{searchValue}</div>\"\n                      </div>}\n                  />\n                </MenuItem>\n              }\n              <div className={classes.list}>\n                {tags && tags\n                  .filter((tag) => {\n                    return isEmpty(searchValue) ||\n                      score(tag.title, searchValue) > minStringScore;\n                  })\n                  .map(\n                    (tag: any) =>\n                      <MenuItem\n                        key={tag.id}\n                        className={classes.menuItem}\n                        onClick={() => handleTagClicked(tag)}\n                      >\n                        <Checkbox\n                          checked={!!tag.checked}\n                          onClick={() => handleTagClicked(tag)}\n                        />\n                        <ListItemText primary={tag.title} />\n                      </MenuItem>,\n                )}\n              </div>\n            </div>\n          </Menu>\n        }\n      </div>\n    ),\n);\n\n// TODO create typescript interface for props\nChipTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.shape(({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    checked: PropTypes.bool,\n  }))),\n  minStringScore: PropTypes.number,\n  disableCreate: PropTypes.bool,\n  // TODO Add remaining blurb positions\n  blurbPosition: PropTypes.oneOf(['top']),\n};\n\nChipTags.defaultProps = {\n  minStringScore: 0.5,\n  blurbPosition: 'top',\n};\n"],"mappings":"AAsEA","sourceRoot":""}